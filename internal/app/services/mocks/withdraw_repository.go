// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/keyjin88/go-loyalty-system/internal/app/services (interfaces: WithdrawRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/keyjin88/go-loyalty-system/internal/app/storage"
)

// MockWithdrawRepository is a mock of WithdrawRepository interface.
type MockWithdrawRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawRepositoryMockRecorder
}

// MockWithdrawRepositoryMockRecorder is the mock recorder for MockWithdrawRepository.
type MockWithdrawRepositoryMockRecorder struct {
	mock *MockWithdrawRepository
}

// NewMockWithdrawRepository creates a new mock instance.
func NewMockWithdrawRepository(ctrl *gomock.Controller) *MockWithdrawRepository {
	mock := &MockWithdrawRepository{ctrl: ctrl}
	mock.recorder = &MockWithdrawRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawRepository) EXPECT() *MockWithdrawRepositoryMockRecorder {
	return m.recorder
}

// GetWithdrawals mocks base method.
func (m *MockWithdrawRepository) GetWithdrawals(arg0 uint) ([]storage.Withdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", arg0)
	ret0, _ := ret[0].([]storage.Withdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockWithdrawRepositoryMockRecorder) GetWithdrawals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockWithdrawRepository)(nil).GetWithdrawals), arg0)
}

// Save mocks base method.
func (m *MockWithdrawRepository) Save(arg0 *storage.Withdraw) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockWithdrawRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockWithdrawRepository)(nil).Save), arg0)
}
